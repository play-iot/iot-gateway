def genDir = "generated"

ext.genProps = [
    genDir         : "$genDir",
    configDir      : "$genDir/conf",
    srcDir         : "$genDir/main",
    javaSrcDir     : "$genDir/main/java",
    resourceDir    : "$genDir/main/resources",
    testDir        : "$genDir/test",
    javaTestSrcDir : "$genDir/test/java",
    testResourceDir: "$genDir/test/resources",
]

task("generateConfigs") {
    group = "build"
    description = "Generate dynamic configuration for project"
    onlyIf {
        project.hasProperty('executable') && project.executable == "true"
    }
    doLast {
        def confDir = new FileTreeBuilder(project.buildDir).dir(project.genProps.configDir)
        def projectName = project.ext.get("baseName")
        def moreLogger = project.hasProperty('specifiedLog') && project.specifiedLog ? project.specifiedLog.collect {
            k, v -> "<logger name=\"$k\" level=\"$v\"/>"
        }.join("\r\n") : ''
        copy {
            into confDir
            from("${rootDir}/config/logger") {
                include "*.xml.template"
                rename '((?!console))+(\\.console)?\\.xml\\.template', '$1.xml'
                filter {
                    it.replaceAll("\\{\\{project\\}\\}", projectName).replaceAll("\\{\\{more_logger\\}\\}", moreLogger)
                }
            }
            from("src/main/resources") {
                include "*.json"
            }
        }
        if (project.hasProperty("service") && project.service == "true") {
            copy {
                into confDir
                from("${projectDir}/src/service") {
                    include "*.service"
                    filter {
                        it.replaceAll("\\{\\{project\\}\\}", "$projectName-$project.version")
                    }
                }
            }
        }
        if (project.hasProperty("sample") && project.sample == "true") {
            copy {
                into confDir
                from("${projectDir}/src/sample")
            }
        }
    }
}

processResources {
    dependsOn("generateConfigs")
}

sourceSets {
    main {
        java {
            resources.srcDirs += new File(project.buildDir, project.genProps.resourceDir)
        }
    }
    test {
        java {
            resources.srcDirs += new File(project.buildDir, project.genProps.testResourceDir)
        }
    }
}
